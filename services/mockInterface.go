// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package services is a generated GoMock package.
package services

import (
	entities "Bookstore/entities"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBook is a mock of Book interface
type MockBook struct {
	ctrl     *gomock.Controller
	recorder *MockBookMockRecorder
}

// MockBookMockRecorder is the mock recorder for MockBook
type MockBookMockRecorder struct {
	mock *MockBook
}

// NewMockBook creates a new mock instance
func NewMockBook(ctrl *gomock.Controller) *MockBook {
	mock := &MockBook{ctrl: ctrl}
	mock.recorder = &MockBookMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBook) EXPECT() *MockBookMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockBook) GetAll(arg0, arg1 string) ([]entities.Books, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0, arg1)
	ret0, _ := ret[0].([]entities.Books)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockBookMockRecorder) GetAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockBook)(nil).GetAll), arg0, arg1)
}

// GetByID mocks base method
func (m *MockBook) GetByID(arg0 int) (entities.Books, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(entities.Books)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockBookMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockBook)(nil).GetByID), arg0)
}

// PostBook mocks base method
func (m *MockBook) PostBook(book entities.Books) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostBook", book)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostBook indicates an expected call of PostBook
func (mr *MockBookMockRecorder) PostBook(book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostBook", reflect.TypeOf((*MockBook)(nil).PostBook), book)
}

// PutBook mocks base method
func (m *MockBook) PutBook(book entities.Books, id int) (entities.Books, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBook", book, id)
	ret0, _ := ret[0].(entities.Books)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutBook indicates an expected call of PutBook
func (mr *MockBookMockRecorder) PutBook(book, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBook", reflect.TypeOf((*MockBook)(nil).PutBook), book, id)
}

// DeleteBook mocks base method
func (m *MockBook) DeleteBook(arg0 int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBook", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBook indicates an expected call of DeleteBook
func (mr *MockBookMockRecorder) DeleteBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockBook)(nil).DeleteBook), arg0)
}

// MockAuthor is a mock of Author interface
type MockAuthor struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorMockRecorder
}

// MockAuthorMockRecorder is the mock recorder for MockAuthor
type MockAuthorMockRecorder struct {
	mock *MockAuthor
}

// NewMockAuthor creates a new mock instance
func NewMockAuthor(ctrl *gomock.Controller) *MockAuthor {
	mock := &MockAuthor{ctrl: ctrl}
	mock.recorder = &MockAuthorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthor) EXPECT() *MockAuthorMockRecorder {
	return m.recorder
}

// PostAuthor mocks base method
func (m *MockAuthor) PostAuthor(author entities.Author) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostAuthor", author)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAuthor indicates an expected call of PostAuthor
func (mr *MockAuthorMockRecorder) PostAuthor(author interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAuthor", reflect.TypeOf((*MockAuthor)(nil).PostAuthor), author)
}

// PutAuthor mocks base method
func (m *MockAuthor) PutAuthor(author entities.Author, id int) (entities.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAuthor", author, id)
	ret0, _ := ret[0].(entities.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAuthor indicates an expected call of PutAuthor
func (mr *MockAuthorMockRecorder) PutAuthor(author, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAuthor", reflect.TypeOf((*MockAuthor)(nil).PutAuthor), author, id)
}

// DeleteAuthor mocks base method
func (m *MockAuthor) DeleteAuthor(arg0 int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthor", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAuthor indicates an expected call of DeleteAuthor
func (mr *MockAuthorMockRecorder) DeleteAuthor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthor", reflect.TypeOf((*MockAuthor)(nil).DeleteAuthor), arg0)
}
