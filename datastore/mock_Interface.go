// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package datastore is a generated GoMock package.
package datastore

import (
	entities "Bookstore/entities"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBookStore is a mock of BookStore interface.
type MockBookStore struct {
	ctrl     *gomock.Controller
	recorder *MockBookStoreMockRecorder
}

// MockBookStoreMockRecorder is the mock recorder for MockBookStore.
type MockBookStoreMockRecorder struct {
	mock *MockBookStore
}

// NewMockBookStore creates a new mock instance.
func NewMockBookStore(ctrl *gomock.Controller) *MockBookStore {
	mock := &MockBookStore{ctrl: ctrl}
	mock.recorder = &MockBookStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookStore) EXPECT() *MockBookStoreMockRecorder {
	return m.recorder
}

// CheckBook mocks base method.
func (m *MockBookStore) CheckBook(ctx context.Context, id int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBook", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckBook indicates an expected call of CheckBook.
func (mr *MockBookStoreMockRecorder) CheckBook(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBook", reflect.TypeOf((*MockBookStore)(nil).CheckBook), ctx, id)
}

// DeleteBook mocks base method.
func (m *MockBookStore) DeleteBook(ctx context.Context, id int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBook", ctx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockBookStoreMockRecorder) DeleteBook(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockBookStore)(nil).DeleteBook), ctx, id)
}

// GetAllBooks mocks base method.
func (m *MockBookStore) GetAllBooks(ctx context.Context, a, b string) ([]entities.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBooks", ctx, a, b)
	ret0, _ := ret[0].([]entities.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBooks indicates an expected call of GetAllBooks.
func (mr *MockBookStoreMockRecorder) GetAllBooks(ctx, a, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBooks", reflect.TypeOf((*MockBookStore)(nil).GetAllBooks), ctx, a, b)
}

// GetAllBooksByTitle mocks base method.
func (m *MockBookStore) GetAllBooksByTitle(ctx context.Context, title string) ([]entities.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBooksByTitle", ctx, title)
	ret0, _ := ret[0].([]entities.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBooksByTitle indicates an expected call of GetAllBooksByTitle.
func (mr *MockBookStoreMockRecorder) GetAllBooksByTitle(ctx, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBooksByTitle", reflect.TypeOf((*MockBookStore)(nil).GetAllBooksByTitle), ctx, title)
}

// GetBookByID mocks base method.
func (m *MockBookStore) GetBookByID(ctx context.Context, id int) (entities.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookByID", ctx, id)
	ret0, _ := ret[0].(entities.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookByID indicates an expected call of GetBookByID.
func (mr *MockBookStoreMockRecorder) GetBookByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookByID", reflect.TypeOf((*MockBookStore)(nil).GetBookByID), ctx, id)
}

// PostBook mocks base method.
func (m *MockBookStore) PostBook(ctx context.Context, books *entities.Book) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostBook", ctx, books)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostBook indicates an expected call of PostBook.
func (mr *MockBookStoreMockRecorder) PostBook(ctx, books interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostBook", reflect.TypeOf((*MockBookStore)(nil).PostBook), ctx, books)
}

// PutBook mocks base method.
func (m *MockBookStore) PutBook(ctx context.Context, books entities.Book, id int) (entities.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBook", ctx, books, id)
	ret0, _ := ret[0].(entities.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutBook indicates an expected call of PutBook.
func (mr *MockBookStoreMockRecorder) PutBook(ctx, books, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBook", reflect.TypeOf((*MockBookStore)(nil).PutBook), ctx, books, id)
}

// MockAuthorStore is a mock of AuthorStore interface.
type MockAuthorStore struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorStoreMockRecorder
}

// MockAuthorStoreMockRecorder is the mock recorder for MockAuthorStore.
type MockAuthorStoreMockRecorder struct {
	mock *MockAuthorStore
}

// NewMockAuthorStore creates a new mock instance.
func NewMockAuthorStore(ctrl *gomock.Controller) *MockAuthorStore {
	mock := &MockAuthorStore{ctrl: ctrl}
	mock.recorder = &MockAuthorStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorStore) EXPECT() *MockAuthorStoreMockRecorder {
	return m.recorder
}

// CheckAuthor mocks base method.
func (m *MockAuthorStore) CheckAuthor(ctx context.Context, author entities.Author) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAuthor", ctx, author)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAuthor indicates an expected call of CheckAuthor.
func (mr *MockAuthorStoreMockRecorder) CheckAuthor(ctx, author interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuthor", reflect.TypeOf((*MockAuthorStore)(nil).CheckAuthor), ctx, author)
}

// DeleteAuthor mocks base method.
func (m *MockAuthorStore) DeleteAuthor(ctx context.Context, id int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthor", ctx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAuthor indicates an expected call of DeleteAuthor.
func (mr *MockAuthorStoreMockRecorder) DeleteAuthor(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthor", reflect.TypeOf((*MockAuthorStore)(nil).DeleteAuthor), ctx, id)
}

// GetAllAuthor mocks base method.
func (m *MockAuthorStore) GetAllAuthor(ctx context.Context) ([]entities.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAuthor", ctx)
	ret0, _ := ret[0].([]entities.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAuthor indicates an expected call of GetAllAuthor.
func (mr *MockAuthorStoreMockRecorder) GetAllAuthor(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAuthor", reflect.TypeOf((*MockAuthorStore)(nil).GetAllAuthor), ctx)
}

// PostAuthor mocks base method.
func (m *MockAuthorStore) PostAuthor(ctx context.Context, author entities.Author) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostAuthor", ctx, author)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAuthor indicates an expected call of PostAuthor.
func (mr *MockAuthorStoreMockRecorder) PostAuthor(ctx, author interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAuthor", reflect.TypeOf((*MockAuthorStore)(nil).PostAuthor), ctx, author)
}

// PutAuthor mocks base method.
func (m *MockAuthorStore) PutAuthor(ctx context.Context, author entities.Author, id int) (entities.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAuthor", ctx, author, id)
	ret0, _ := ret[0].(entities.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAuthor indicates an expected call of PutAuthor.
func (mr *MockAuthorStoreMockRecorder) PutAuthor(ctx, author, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAuthor", reflect.TypeOf((*MockAuthorStore)(nil).PutAuthor), ctx, author, id)
}
