// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package datastore is a generated GoMock package.
package datastore

import (
	entities "Bookstore/entities"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBookStore is a mock of BookStore interface
type MockBookStore struct {
	ctrl     *gomock.Controller
	recorder *MockBookStoreMockRecorder
}

// MockBookStoreMockRecorder is the mock recorder for MockBookStore
type MockBookStoreMockRecorder struct {
	mock *MockBookStore
}

// NewMockBookStore creates a new mock instance
func NewMockBookStore(ctrl *gomock.Controller) *MockBookStore {
	mock := &MockBookStore{ctrl: ctrl}
	mock.recorder = &MockBookStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBookStore) EXPECT() *MockBookStoreMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockBookStore) GetAll(arg0, arg1 string) ([]entities.Books, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0, arg1)
	ret0, _ := ret[0].([]entities.Books)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockBookStoreMockRecorder) GetAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockBookStore)(nil).GetAll), arg0, arg1)
}

// GetByID mocks base method
func (m *MockBookStore) GetByID(arg0 int) (entities.Books, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(entities.Books)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockBookStoreMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockBookStore)(nil).GetByID), arg0)
}

// PostBook mocks base method
func (m *MockBookStore) PostBook(books entities.Books) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostBook", books)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostBook indicates an expected call of PostBook
func (mr *MockBookStoreMockRecorder) PostBook(books interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostBook", reflect.TypeOf((*MockBookStore)(nil).PostBook), books)
}

// PutBook mocks base method
func (m *MockBookStore) PutBook(books entities.Books, id int) (entities.Books, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBook", books, id)
	ret0, _ := ret[0].(entities.Books)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutBook indicates an expected call of PutBook
func (mr *MockBookStoreMockRecorder) PutBook(books, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBook", reflect.TypeOf((*MockBookStore)(nil).PutBook), books, id)
}

// DeleteBook mocks base method
func (m *MockBookStore) DeleteBook(arg0 int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBook", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBook indicates an expected call of DeleteBook
func (mr *MockBookStoreMockRecorder) DeleteBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockBookStore)(nil).DeleteBook), arg0)
}

// MockAuthorStore is a mock of AuthorStore interface
type MockAuthorStore struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorStoreMockRecorder
}

// MockAuthorStoreMockRecorder is the mock recorder for MockAuthorStore
type MockAuthorStoreMockRecorder struct {
	mock *MockAuthorStore
}

// NewMockAuthorStore creates a new mock instance
func NewMockAuthorStore(ctrl *gomock.Controller) *MockAuthorStore {
	mock := &MockAuthorStore{ctrl: ctrl}
	mock.recorder = &MockAuthorStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthorStore) EXPECT() *MockAuthorStoreMockRecorder {
	return m.recorder
}

// PostAuthor mocks base method
func (m *MockAuthorStore) PostAuthor(author entities.Author) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostAuthor", author)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAuthor indicates an expected call of PostAuthor
func (mr *MockAuthorStoreMockRecorder) PostAuthor(author interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAuthor", reflect.TypeOf((*MockAuthorStore)(nil).PostAuthor), author)
}

// PutAuthor mocks base method
func (m *MockAuthorStore) PutAuthor(author entities.Author, id int) (entities.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAuthor", author, id)
	ret0, _ := ret[0].(entities.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAuthor indicates an expected call of PutAuthor
func (mr *MockAuthorStoreMockRecorder) PutAuthor(author, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAuthor", reflect.TypeOf((*MockAuthorStore)(nil).PutAuthor), author, id)
}

// DeleteAuthor mocks base method
func (m *MockAuthorStore) DeleteAuthor(arg0 int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthor", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAuthor indicates an expected call of DeleteAuthor
func (mr *MockAuthorStoreMockRecorder) DeleteAuthor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthor", reflect.TypeOf((*MockAuthorStore)(nil).DeleteAuthor), arg0)
}
